{"version":3,"sources":["app.scss","../../../node_modules/susy/sass/susy/output/support/_rem.scss","../../../node_modules/susy/sass/susy/language/susy/_span.scss","../../../node_modules/susy/sass/susy/output/shared/_direction.scss"],"names":[],"mappings":"AAUA,eAAe;AACf;EACE,yBAAyB;EACzB,qBAAqB;EACrB,oBAAoB;EACpB,oBAAoB;EACpB,gBAAgB;EAChB,WAAW;EACX,WAAW;EACX,UAAU,EACX;;AACD;EACE,uBAAuB;EACvB,8BAA8B;EAC9B,eAAe;EACf,mBAAmB;EACnB,gBAAgB;EAChB,cAAc;EACd,YAAY;EACZ,gBAAgB;EAChB,sBAAsB;EACtB,gBAAgB;EAChB,iBAAiB;EACjB,aAAa;EACb,gBAAgB;EAChB,mBAAmB;EACnB,sBAAsB;EACtB,sBAAsB;EACtB,yBAAyB;EACzB,kBAAkB;EAClB,eAAe,EAChB;;AACD;EACE,0BAA0B,EAC3B;;AACD;EACE,sBAAsB;EACtB,eAAe,EAChB;;AACD;EACE,uBAAuB;EACvB,uBAAuB;EACvB,mBAAmB;EACnB,iDAAgC;EAChC,uBAAuB;EACvB,eAAe;EACf,gBAAgB;EAGhB,kBAAkB;EAClB,YAAY;EACZ,UAAU;EACV,kBAAkB,EACnB;;AACD;EACE,cAAc;EACd,eAAe;EACf,mBAAmB,EACpB;;AACD;EACE,kBAAkB;EAClB,gBAAgB;EAChB,eAAe;EACf,mBAAmB;EACnB,oBAAoB;EACpB,mBAAmB,EACpB;;AACD;EACE,YAAY;EACZ,iBAAiB,EAClB;;AACD;EACE,YAAY;EACZ,sBAAsB;EACtB,gBAAgB;EAChB,iBAAiB,EAClB;;AACD;EACE,WAAW;EACX,mBAAmB;EACnB,YAAY;EACZ,aAAa;EACb,gBAAgB;EAChB,0BAAsB,EACvB;;AACD;EACE,aAAa;EACb,iBAAiB;EACjB,gBAAgB,EACjB;;AAED;EClFI,WCwIoB;EDxIpB,YEA4D,EHoF/D;;AACD;ECrFI,WCwIoB;EDxIpB,aEAuE;EFAvE,gBCkFoB,EFKvB;;AACD;EACE,kBAAkB,EACnB;;AACD;EACE,YAAY,EACb;;AACD;EACE,eAAe;EAEf,uBAAe;EACf,0BAA0B;EAC1B,mBAAmB,EACpB;;AACD;EAEE,YAAY,EACb;;AACU;EACT,kBAAiB;EACjB,aAAa;EACb,aAAa,EACd;;AAED;EACE,mBAAmB;EACnB,SAAS,EACV;;AAED;EACE,cAAc,EACf","file":"app.css","sourcesContent":["// @import \"node_modules/bootstrap-sass/assets/stylesheets/bootstrap\";\n@import \"../../../node_modules/susy/sass/susy\";\n\n$susy: (\n        columns: 4,  // The number of columns in your grid\n        gutters: 0, // The size of a gutter in relation to a single column\n        container: 1024px\n);\n\n\n/* CSS Reset */\n* {\n  vertical-align: baseline;\n  font-weight: inherit;\n  font-family: Roboto;\n  font-style: inherit;\n  font-size: 100%;\n  outline: 0;\n  padding: 0;\n  margin: 0;\n}\nbutton{\n  background-color: #ddd;\n  border-bottom: 2px solid #ccc;\n  border-left: 0;\n  border-radius: 3px;\n  border-right: 0;\n  border-top: 0;\n  color: #000;\n  cursor: pointer;\n  display: inline-block;\n  font-size: 16px;\n  font-weight: 400;\n  height: 27px;\n  min-width: 54px;\n  text-align: center;\n  text-decoration: none;\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  padding: 4px 10px;\n  margin: 10px 0;\n}\nbutton:hover{\n  background-color: #eaeaea;\n}\na{\n  text-decoration: none;\n  color: #2e3436;\n}\ntextarea, input {\n  background-color: #fff;\n  border: 1px solid #ddd;\n  border-radius: 3px;\n  box-shadow: inset 0 1px 1px rgba(0,0,0,.075);\n  box-sizing: border-box;\n  display: block;\n  font-size: 13px;\n  //height: 200px;\n  //min-height: 200px;\n  line-height: 21px;\n  width: 100%;\n  margin: 0;\n  padding: 8px 12px;\n}\n.content{\n  width: 1024px;\n  margin: 0 auto;\n  position: relative;\n}\n.wrap {\n  max-width: 1024px;\n  height: inherit;\n  margin: 0 auto;\n  padding-left: 10px;\n  padding-right: 10px;\n  position: relative;\n}\n.titlediv{\n  float: left;\n  margin-top: 12px;\n}\n.title{\n  color: #000;\n  text-decoration: none;\n  font-size: 24px;\n  font-weight: 200;\n}\n.navbar{\n  z-index: 1;\n  position: relative;\n  width: 100%;\n  height: 50px;\n  position: fixed;\n  background-color: rgba(242, 242, 242, 1);\n}\n.logindiv{\n  float: right;\n  list-style: none;\n  margin-top: 7px;\n}\n\n.pastefield{\n  @include span(3);\n}\n.recent{\n  @include span(1 last);\n}\n.main{\n  padding-top: 70px;\n}\n#text-field{\n  width: 100%;\n}\n.somepaste{\n  margin: 10px 0;\n\n  background: rgb(245, 245, 245);\n  border: 2px #e3e3e3 solid;\n  border-radius: 3px;\n}\n.pastetext{\n\n  width: 100%;\n}\n.pastetext textarea, .pastetext input{\n  margin:10px 10px;\n  height: 80px;\n  width: 400px;\n}\n\n.user{\n  position: absolute;\n  right: 0;\n}\n\n.rec-title{\n  padding: 10px;\n}","// rem Support\n// ===========\n\n// rem\n// ---\n// Check for an existing support mixin, or output directly.\n// - $prop  : <css property>\n// - $val   : <css value>\n@mixin susy-rem(\n  $prop,\n  $val\n) {\n  $_reqs: (\n    variable: rhythm-unit rem-with-px-fallback,\n    mixin: rem,\n  );\n  @if susy-support(rem, $_reqs, $warn: false) and $rhythm-unit == rem {\n    @include rem($prop, $val);\n  } @else {\n    #{$prop}: $val;\n  }\n}\n","// Span Syntax\n// ===========\n\n// Span [mixin]\n// ------------\n// Set a spanning element using shorthand syntax.\n// - $span  : <span>\n@mixin span(\n  $span\n) {\n  $inspect: $span;\n  $span: parse-span($span);\n  $output: span-math($span);\n  $nesting: susy-get(span, $span);\n  $clear: susy-get(clear, $span);\n\n  $box: susy-get(box-sizing, $span);\n  $content-box: if(susy-get(global-box-sizing) != 'border-box', true, false);\n  $box: $box or if(is-inside($span) and $content-box, border-box, null);\n\n  @if $clear == break {\n    @include break;\n  } @else if $clear == nobreak {\n    @include nobreak;\n  }\n\n  @include susy-inspect(span, $inspect);\n  @include output((box-sizing: $box));\n  @include float-span-output($output...);\n\n  @if valid-columns($nesting, silent) {\n    @include nested($span) { @content; }\n  } @else {\n    @content;\n  }\n}\n\n// Span [function]\n// ---------------\n// Return the width of a span.\n// - $span  : <span>\n@function span(\n  $span\n) {\n  @return get-span-width($span);\n}\n\n// Span Math\n// ---------\n// Get all the span results.\n// - $span: <map>\n@function span-math(\n  $span\n) {\n  $nest             : if(susy-get(role, $span) == nest, true, false);\n  $split-nest       : if(is-split($span) and $nest, true, false);\n  $edge             : get-edge($span);\n  $location         : get-location($span);\n\n  $float            : from;\n  $padding-before   : null;\n  $padding-after    : null;\n  $margin-before    : null;\n  $margin-after     : null;\n\n  // calculate widths\n  $spread: index(map-values($span), spread);\n  $span: if($split-nest and not($spread), map-merge($span, (spread: wide)), $span);\n  $width: get-span-width($span);\n  $gutters: get-gutters($span);\n\n  // apply gutters\n  @if is-inside($span) {\n    @if not(susy-get(role, $span)) {\n      $padding-before: map-get($gutters, before);\n      $padding-after: map-get($gutters, after);\n    }\n  } @else {\n    @if not($split-nest) {\n      $margin-before: map-get($gutters, before);\n      $margin-after: map-get($gutters, after);\n    }\n  }\n\n  // special margin handling\n  @if susy-get(output, $span) == isolate and $location {\n    $margin-before: get-isolation($span);\n    $margin-after: -100%;\n  } @else if $edge {\n    $is-split: is-split($span);\n    $pos: susy-get(gutter-position, $span);\n\n    @if $edge == last {\n      $float: susy-get(last-flow, $span);\n    }\n\n    @if not($is-split) {\n      @if $edge == full or ($edge == first and $pos == before) {\n        $margin-before: 0;\n      }\n      @if $edge == full or ($edge == last and $pos == after) {\n        $margin-after: 0;\n      }\n    }\n\n  }\n\n  @return (\n    width           : $width,\n    float           : $float,\n    margin-before   : $margin-before,\n    margin-after    : $margin-after,\n    padding-before  : $padding-before,\n    padding-after   : $padding-after,\n    flow            : susy-get(flow, $span),\n  );\n}\n\n// Get Span Width\n// --------------\n// Return span width.\n// - $span: <map>\n@function get-span-width(\n  $span\n) {\n  $span     : parse-span($span);\n\n  $n        : susy-get(span, $span);\n  $location : get-location($span);\n  $columns  : susy-get(columns, $span);\n  $gutters  : susy-get(gutters, $span);\n  $spread   : susy-get(spread, $span);\n\n  $context  : null;\n  $span-sum : null;\n  $width    : null;\n\n  @if $n == 'full' {\n    $pos: susy-get(gutter-position, $span);\n    $role: susy-get(role, $span);\n    $n: if($pos == split and $role != nest, susy-count($columns), 100%);\n  }\n\n  @if type-of($n) != number {\n    @warn \"(#{type-of($n)}) #{$n} is not a valid span.\";\n  } @else if unitless($n) {\n    $context: susy-sum($columns, $gutters, if(is-split($span), wide, narrow));\n    $spread: if(is-inside($span), $spread or wide, $spread);\n    $span-sum: susy($n, $location, $columns, $gutters, $spread);\n\n    $_math: susy-get(math, $span);\n    $_column-width: susy-get(column-width, $span);\n    @if $_math == static {\n      $width: $span-sum * valid-column-math($_math, $_column-width);\n    } @else {\n      $width: percentage($span-sum / $context);\n    }\n  } @else {\n    $width: $n;\n  }\n\n  @return $width;\n}\n","// Direction Helpers\n// =================\n\n// Susy Flow Defaults\n// ------------------\n// - PRIVATE\n@include susy-defaults((\n  flow: ltr,\n));\n\n// Get Direction\n// -------------\n// Return the 'from' or 'to' direction of a ltr or rtl flow.\n// - [$flow]  : ltr | rtl\n// - [$key]   : from | to\n@function get-direction(\n  $flow: map-get($susy-defaults, flow),\n  $key: from\n) {\n  $return: if($flow == rtl, (from: right, to: left), (from: left, to: right));\n  @return map-get($return, $key);\n}\n\n// To\n// --\n// Return the 'to' direction of a flow\n// - [$flow]  : ltr | rtl\n@function to(\n  $flow: map-get($susy-defaults, flow)\n) {\n  @return get-direction($flow, to);\n}\n\n// From\n// ----\n// Return the 'from' direction of a flow\n// - [$flow]  : ltr | rtl\n@function from(\n  $flow: map-get($susy-defaults, flow)\n) {\n  @return get-direction($flow, from);\n}\n"],"sourceRoot":"/source/"}